// Defines.
#define NUM_LIGHTS 4

// Globals.
Texture2D shaderTexture : register(t0);
SamplerState sample : register(s0);

cbuffer LightColorBuffer {
	float4 diffuseColor[NUM_LIGHTS];
};

// Typedefs.
struct PixelInput {
	float4 position : SV_POSITION;
	float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
    float3 lightPos[NUM_LIGHTS] : TEXCOORD1;
};

// Pixel Shader.
float4 LightPixelShader(PixelInput input) : SV_TARGET {
	float4 textureColor;
	float lightIntensity[NUM_LIGHTS];
	float4 lightColor[NUM_LIGHTS];
    float4 colorSum;
    float4 color;

	// Sample the pixel color from the texture using the sampler at this texture coordinate location.
	textureColor = shaderTexture.Sample(sample, input.tex);

	// Calculate the amount of light on this pixel.
    for (int i = 0; i < NUM_LIGHTS; i++)
    {
        lightIntensity[i] = dot(input.normal, input.lightPos[i]);
        lightColor[i] = diffuseColor[i] * lightIntensity[i];
    }
	
	// Initialize the sum of colors.
    colorSum = float4(0.0f, 0.0f, 0.0f, 1.0f);
	
	// Add all of the light colors up.
    for (int i = 0; i < NUM_LIGHTS; i++)
    {
        colorSum += lightColor[i];
    }

	// Multiply the texture pixel and the final diffuse color to get the final pixel color result.
    color = saturate(colorSum) * textureColor;

	return color;
}
